CREATE TABLE applestore_description_combined AS 

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4


**EXPLOARTORY DATA ANALYSIS** 

-- Count the number of unique apps in both tables
SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM AppleStore;

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM applestore_description_combined;


--Check for missing values
SELECT COUNT(*) AS MissingValues
FROM AppleStore
WHERE track_name IS null OR user_rating is null or prime_genre IS null

SELECT COUNT(*) AS MissingValues
FROM applestore_description_combined
WHERE app_desc IS null 



-- NUMBERS OF APPS PER GENERE
SELECT prime_genre, COUNT(*) as NumApps
FROM AppleStore
GROUP by prime_genre
order BY NumApps DESC


-- RATINGS
SELECT min(user_rating) as MinRating,
	   max(user_rating) AS MaxRating,
       avg(user_rating) AS AvgRating
FROM AppleStore


- DISTINCTION BETWEEN PAID & FREE APPS
SELECT CASE
	WHEN price > 0 THEN 'Paid'
    ELSE 'Free'
    END AS App_Type,
    avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY App_Type


- DISTINCTION BY LANGUAGE COUNT
SELECT CASE
	WHEN lang_num < 10 THEN '<10 languages'
    WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages'
    ELSE '>30 languages'
    END as language_bucket,
	avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY language_bucket
order by Avg_Rating DESC


-- RATINGS BY GENRE
SELECT prime_genre,
	avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP by prime_genre
ORDER BY Avg_Rating ASC
LIMIT 10;

-- DISTINCTION BETWEEN DESCRITION LENGTH & RATINGS
SELECT CASE
	WHEN length(B.app_desc)< 500 THEN 'short'
    WHEN length(B.app_desc)BETWEEN 500 AND 1000 THEN 'Medium'
    ELSE 'Long'
    END AS Des_length,
    avg(user_rating) AS Avg_Rating
FROM
	AppleStore as A
JOIN
	applestore_description_combined AS B
ON 	
	A.id = B.id
                
GROUP BY Des_length
ORDER BY Avg_Rating DESC


-- RANKING TOP APPLICATION PER GENRE
SELECT
	prime_genre,
    track_name,
    user_rating
FROM (
  		SELECT
  			  prime_genre,
  			  track_name,
  			  user_rating,
  			  RANK() OVER (PARTITION  BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank
         FROM
         	AppleStore
            ) AS a 
      WHERE
      A.rank = 1






